Test programs
=============

In the subdirectories of this directory various test programs can be
found. Some of them, such as 'randomwalk', are examples on how to
program the Scorpion robots for Player/Stage, while others are
strictly for testing the different driver interfaces, e.g. the
'bumper' test.

For more information on the individual test programs, see the README
files for a short description of each test and the main.cc files for
the actual programs.


A small overview of the tests
-----------------------------

Below, an overview of some of the test programs and what they test for
is given. The list is grouped either by the specific interface they test
or "mixed tests", if they use multiple interfaces.

Front bumper tests:

 - bumper: Test the two front bumper sensor. If either of the two are
   bumped, it drives back in the reverse direction depending on which
   bumper (left-> clockwise or right->counter-clockwise) was pushed.
	 Drive back in a straight line if both are activated.

Position2d drive tests:

 - square: A simple test of the position2d interface using SetSpeed.

Mixed tests:

 - output: Print data from the various sensor-oriented interfaces.

 - randomwalk: This program combines and test the position2d and ir
   devices and is thus a good "show case" of using a simple subset of
   the ERSP Player driver. It is based on the p2os/laser random walk
   example from the Player project.

Future work
-----------
Some ideas for test programs that need to be written or improvements
of existing ones:

Position2d drive tests:

 - square-carlike: A simple test of the position2d interface using
   SetCarLike().

Position2d odometry test:

 - Test angle accuracy. Check if the odometry information provided by
   the ERSP library is usable. This test is probably not relevant for
   testing stage "compatibility".

 - Test speed / acceleration. For example, test how well change of
   speed is handled.

 - Check precision IRL and the in Stage with localization "gps" or
   "odom". Eg. even make a simulation with 2 robots doing the same
   motion and look for differences?

Mixed tests:

 - IR range calibration: make a program that positions the robot at
   a specific distance from a wall.

 - Make a wall following program. Interesting to keep the
   robot at a certain distance.

 - Maze: drive through a simple maze. The maze should be
   simple enough that a physical version can also be built
   and tested.

 - Sensor experiment: read sensors and output values on screen. First
   read as often as possible for eg. 30 sec. and the repeat one read
   10 times with eg. a wait of 10 sec. This test should be run in
   Stage and IRL placing the robot near object. The experiment should
   reveal read/queue problems and how Stage vs. IRL works sensing
   (assume we can place the robot in know distance from objects it can
   sese).
