The Player drivers
==================

This directory contains Player "plugins", where the most important is
the ERSP driver. The various drivers or collection of drivers live in
a separate subdirectory, each containing a README file describing the
driver(s), source files for the driver(s), and lastly player
configuration files (*.cfg) needed for using the plugins with Player.

Since Player plugins are loaded dynamically the building of drivers is
a bit more complicated. To handle this, drivers are build using
autotools, as explained in the build system section below.

Note that if you develop and run "make" in this directory or a
subdirectory you also need to run:

	$ make install

so the newest version of each driver is installed into the lib/
directory where player looks for plugins when using the top-level
Makefile for starting player.

The build system
-----------------
The driver uses autotools (autoconf and automake) to make the
(somewhat sophisticated) building of the Player driver plugins more
portable. To build the drivers it is necessary to first "bootstrap"
the configure script and the Makefile. It will then be possible to
build the driver by simply running make.

The bootstrapping is done by the Makefile in the project root.
Alternatively, it can be done manually by running:

	$ autoreconf --force --install

in this directory.

The following files are involved in the bootstrapping and build system
for the driver:

 - configure.ac: Autoconf and automake settings, (m4) macro usage and
   shell code for checking the local system, and information about
   generated files.

 - acinclude.m4: Contains non-standard macros used for creating the
   configure script so that it is ensure they are available. For now this
   only contains a macro for easily using pkg-config to check for packages
   installed on the local system.

 - config/: This directory contains various file required for portable
   installation (install-sh, mkinstalldirs, missing), guessing the
   cannonical system name (config.guess, config.sub), setting up
   building of shared object using libtool (ltmain.sh), and generating
   build dependencies when compiling (depcomp).

Additionally, each build directory contains:

 - Makefile.am: Which is a "template" for the resulting Makefile
   generated by configure. It specifies what and how to build the
   driver using the automake syntax.

After running the configure script several files will be created. The
most important ones are config.h, which can be included from the
source code to get knowledge about the local system, and the various
Makefiles defining how to build the drivers.

Future work
-----------
Some possible future additions are:

 - A virtual wallfinder driver providing either a "position2d" interface
   or the "planner" interface. Additionally, it could use joystick
   derived "position2d" commands to learn how to do the wallfollowing by
   building a database of sensor data versus commands.
